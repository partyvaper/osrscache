using System;

/*
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
namespace net.runelite.cache
{
	using InterfaceDefinition = net.runelite.cache.definitions.InterfaceDefinition;
	using InterfaceExporter = net.runelite.cache.definitions.exporters.InterfaceExporter;
	using InterfaceLoader = net.runelite.cache.definitions.loaders.InterfaceLoader;
	using Archive = net.runelite.cache.fs.Archive;
	using ArchiveFiles = net.runelite.cache.fs.ArchiveFiles;
	using FSFile = net.runelite.cache.fs.FSFile;
	using Index = net.runelite.cache.fs.Index;
	using Storage = net.runelite.cache.fs.Storage;
	using Store = net.runelite.cache.fs.Store;
	using Namer = net.runelite.cache.util.Namer;

	public class InterfaceManager
	{
		private readonly Store store;
		private InterfaceDefinition[][] interfaces;
		private readonly Namer namer = new Namer();

		public InterfaceManager(Store store)
		{
			this.store = store;
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void load() throws java.io.IOException
		public virtual void load()
		{
			InterfaceLoader loader = new InterfaceLoader();

			Storage storage = store.Storage;
			Index index = store.getIndex(IndexType.INTERFACES);

			int max = index.Archives.Select(a => a.getArchiveId()).Max().getAsInt();
			interfaces = new InterfaceDefinition[max + 1][];

			foreach (Archive archive in index.Archives)
			{
				int archiveId = archive.ArchiveId;
				sbyte[] archiveData = storage.loadArchive(archive);
				ArchiveFiles files = archive.getFiles(archiveData);

				InterfaceDefinition[] ifaces = interfaces[archiveId];
				if (ifaces == null)
				{
					ifaces = interfaces[archiveId] = new InterfaceDefinition[archive.FileData.Length];
				}

				foreach (FSFile file in files.Files)
				{
					int fileId = file.FileId;

					int widgetId = (archiveId << 16) + fileId;

					InterfaceDefinition iface = loader.load(widgetId, file.Contents);
					ifaces[fileId] = iface;
				}
			}
		}

		public virtual int NumInterfaceGroups
		{
			get
			{
				return interfaces.Length;
			}
		}

		public virtual int getNumChildren(int groupId)
		{
			return interfaces[groupId].Length;
		}

		public virtual InterfaceDefinition[] getIntefaceGroup(int groupId)
		{
			return interfaces[groupId];
		}

		public virtual InterfaceDefinition getInterface(int groupId, int childId)
		{
			return interfaces[groupId][childId];
		}

		public virtual InterfaceDefinition[][] Interfaces
		{
			get
			{
				return interfaces;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void export(java.io.File out) throws java.io.IOException
		public virtual void export(File @out)
		{
			@out.mkdirs();

			foreach (InterfaceDefinition[] defs in interfaces)
			{
				if (defs == null)
				{
					continue;
				}

				foreach (InterfaceDefinition def in defs)
				{
					if (def == null)
					{
						continue;
					}

					InterfaceExporter exporter = new InterfaceExporter(def);

					File folder = new File(@out, "" + ((int)((uint)def.id >> 16)));
					folder.mkdirs();

					File targ = new File(folder, (def.id & 0xffff) + ".json");
					exporter.exportTo(targ);
				}
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void java(java.io.File java) throws java.io.IOException
		public virtual void java(File java)
		{
			System.setProperty("line.separator", "\n");
			java.mkdirs();
			File targ = new File(java, "InterfaceID.java");
			using (PrintWriter fw = new PrintWriter(targ))
			{
				fw.println("/* This file is automatically generated. Do not edit. */");
				fw.println("package net.runelite.api;");
				fw.println("");
				fw.println("public final class InterfaceID {");
				foreach (InterfaceDefinition[] defs in interfaces)
				{
					if (defs == null)
					{
						continue;
					}
					foreach (InterfaceDefinition def in defs)
					{
						if (def == null || string.ReferenceEquals(def.name, null) || def.name.Equals("NULL", StringComparison.OrdinalIgnoreCase))
						{
							continue;
						}

						string name = namer.name(def.name, def.id);
						if (string.ReferenceEquals(name, null))
						{
							continue;
						}

						fw.println("	public static final int " + name + " = " + def.id + ";");
					}
				}
				fw.println("}");
			}
		}
	}

}