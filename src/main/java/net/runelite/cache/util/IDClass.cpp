#include "IDClass.h"

namespace net::runelite::cache::util
{
	using File = java::io::File;
	using FileNotFoundException = java::io::FileNotFoundException;
	using IOException = java::io::IOException;
	using PrintWriter = java::io::PrintWriter;

	IDClass::IDClass(std::shared_ptr<File> file) : java::io::PrintWriter(file)
	{
	}

	std::shared_ptr<IDClass> IDClass::create(std::shared_ptr<File> directory, const std::wstring &name)
	{
		std::shared_ptr<IDClass> c = std::make_shared<IDClass>(std::make_shared<File>(directory, name + L".java"));
		c->println(L"/* This file is automatically generated. Do not edit. */");
		c->println(L"package net.runelite.api;");
		c->println();
		c->print(L"public final class ");
		c->println(name);
		c->println(L"{");
		return c;
	}

	void IDClass::add(const std::wstring &name, int id)
	{
		std::wstring javaName = namer->name(name, id);
		if (javaName == L"")
		{
			return;
		}

		println(L"	public static final int " + javaName + L" = " + std::to_wstring(id) + L";");
	}

	void IDClass::println()
	{
		// Java 9+ only reads line.separator on startup, so we have to override it here
		write(L'\n');
	}

	void IDClass::close()
	{
		println(L"\t/* This file is automatically generated. Do not edit. */");
		println(L"}");
		java::io::PrintWriter::close();
	}
}
