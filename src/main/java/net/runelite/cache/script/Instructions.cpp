#include "Instructions.h"

namespace net::runelite::cache::script
{
	using HashMap = java::util::HashMap;
	using Map = java::util::Map;

	void Instructions::init()
	{
		add(ICONST, L"iconst");
		add(GET_VARP, L"get_varp");
		add(SET_VARP, L"set_varp");
		add(SCONST, L"sconst");
		add(JUMP, L"jump");
		add(IF_ICMPNE, L"if_icmpne");
		add(IF_ICMPEQ, L"if_icmpeq");
		add(IF_ICMPLT, L"if_icmplt");
		add(IF_ICMPGT, L"if_icmpgt");
		add(RETURN, L"return");
		add(GET_VARBIT, L"get_varbit");
		add(SET_VARBIT, L"set_varbit");
		add(IF_ICMPLE, L"if_icmple");
		add(IF_ICMPGE, L"if_icmpge");
		add(ILOAD, L"iload");
		add(ISTORE, L"istore");
		add(SLOAD, L"sload");
		add(SSTORE, L"sstore");
		add(JOIN_STRING, L"join_string");
		add(POP_INT, L"pop_int");
		add(POP_STRING, L"pop_string");
		add(INVOKE, L"invoke");
		add(GET_VARC_INT, L"get_varc_int");
		add(SET_VARC_INT, L"set_varc_int");
		add(DEFINE_ARRAY, L"define_array");
		add(GET_ARRAY_INT, L"get_array_int");
		add(SET_ARRAY_INT, L"set_array_int");
		add(GET_VARC_STRING_OLD, L"get_varc_string_old");
		add(SET_VARC_STRING_OLD, L"set_varc_string_old");
		add(GET_VARC_STRING, L"get_varc_string");
		add(SET_VARC_STRING, L"set_varc_string");
		add(SWITCH, L"switch");
		add(GET_VARCLANSETTING, L"get_varclansetting");
		add(GET_VARCLAN, L"get_varclan");
		add(CC_CREATE, L"cc_create");
		add(CC_DELETE, L"cc_delete");
		add(CC_DELETEALL, L"cc_deleteall");
		add(CC_FIND, L"cc_find");
		add(IF_FIND, L"if_find");
		add(CC_SETPOSITION, L"cc_setposition");
		add(CC_SETSIZE, L"cc_setsize");
		add(CC_SETHIDE, L"cc_sethide");
		add(CC_SETNOCLICKTHROUGH, L"cc_setnoclickthrough");
		add(CC_SETNOSCROLLTHROUGH, L"cc_setnoscrollthrough");
		add(CC_SETSCROLLPOS, L"cc_setscrollpos");
		add(CC_SETCOLOUR, L"cc_setcolour");
		add(CC_SETFILL, L"cc_setfill");
		add(CC_SETTRANS, L"cc_settrans");
		add(CC_SETLINEWID, L"cc_setlinewid");
		add(CC_SETGRAPHIC, L"cc_setgraphic");
		add(CC_SET2DANGLE, L"cc_set2dangle");
		add(CC_SETTILING, L"cc_settiling");
		add(CC_SETMODEL, L"cc_setmodel");
		add(CC_SETMODELANGLE, L"cc_setmodelangle");
		add(CC_SETMODELANIM, L"cc_setmodelanim");
		add(CC_SETMODELORTHOG, L"cc_setmodelorthog");
		add(CC_SETTEXT, L"cc_settext");
		add(CC_SETTEXTFONT, L"cc_settextfont");
		add(CC_SETTEXTALIGN, L"cc_settextalign");
		add(CC_SETTEXTSHADOW, L"cc_settextshadow");
		add(CC_SETOUTLINE, L"cc_setoutline");
		add(CC_SETGRAPHICSHADOW, L"cc_setgraphicshadow");
		add(CC_SETVFLIP, L"cc_setvflip");
		add(CC_SETHFLIP, L"cc_sethflip");
		add(CC_SETSCROLLSIZE, L"cc_setscrollsize");
		add(CC_RESUME_PAUSEBUTTON, L"cc_resume_pausebutton");
		add(CC_SETFILLCOLOUR, L"cc_setfillcolour");
		add(CC_SETLINEDIRECTION, L"cc_setlinedirection");
		add(CC_SETMODELTRANSPARENT, L"cc_setmodeltransparent");
		add(CC_SETOBJECT, L"cc_setobject");
		add(CC_SETNPCHEAD, L"cc_setnpchead");
		add(CC_SETPLAYERHEAD_SELF, L"cc_setplayerhead_self");
		add(CC_SETOBJECT_NONUM, L"cc_setobject_nonum");
		add(CC_SETOBJECT_ALWAYS_NUM, L"cc_setobject_always_num");
		add(CC_SETOP, L"cc_setop");
		add(CC_SETDRAGGABLE, L"cc_setdraggable");
		add(CC_SETDRAGGABLEBEHAVIOR, L"cc_setdraggablebehavior");
		add(CC_SETDRAGDEADZONE, L"cc_setdragdeadzone");
		add(CC_SETDRAGDEADTIME, L"cc_setdragdeadtime");
		add(CC_SETOPBASE, L"cc_setopbase");
		add(CC_SETTARGETVERB, L"cc_settargetverb");
		add(CC_CLEAROPS, L"cc_clearops");
		add(CC_SETOPKEY, L"cc_setopkey");
		add(CC_SETOPTKEY, L"cc_setoptkey");
		add(CC_SETOPKEYRATE, L"cc_setopkeyrate");
		add(CC_SETOPTKEYRATE, L"cc_setoptkeyrate");
		add(CC_SETOPKEYIGNOREHELD, L"cc_setopkeyignoreheld");
		add(CC_SETOPTKEYIGNOREHELD, L"cc_setoptkeyignoreheld");
		add(CC_SETONCLICK, L"cc_setonclick");
		add(CC_SETONHOLD, L"cc_setonhold");
		add(CC_SETONRELEASE, L"cc_setonrelease");
		add(CC_SETONMOUSEOVER, L"cc_setonmouseover");
		add(CC_SETONMOUSELEAVE, L"cc_setonmouseleave");
		add(CC_SETONDRAG, L"cc_setondrag");
		add(CC_SETONTARGETLEAVE, L"cc_setontargetleave");
		add(CC_SETONVARTRANSMIT, L"cc_setonvartransmit");
		add(CC_SETONTIMER, L"cc_setontimer");
		add(CC_SETONOP, L"cc_setonop");
		add(CC_SETONDRAGCOMPLETE, L"cc_setondragcomplete");
		add(CC_SETONCLICKREPEAT, L"cc_setonclickrepeat");
		add(CC_SETONMOUSEREPEAT, L"cc_setonmouserepeat");
		add(CC_SETONINVTRANSMIT, L"cc_setoninvtransmit");
		add(CC_SETONSTATTRANSMIT, L"cc_setonstattransmit");
		add(CC_SETONTARGETENTER, L"cc_setontargetenter");
		add(CC_SETONSCROLLWHEEL, L"cc_setonscrollwheel");
		add(CC_SETONCHATTRANSMIT, L"cc_setonchattransmit");
		add(CC_SETONKEY, L"cc_setonkey");
		add(CC_SETONFRIENDTRANSMIT, L"cc_setonfriendtransmit");
		add(CC_SETONCLANTRANSMIT, L"cc_setonclantransmit");
		add(CC_SETONMISCTRANSMIT, L"cc_setonmisctransmit");
		add(CC_SETONDIALOGABORT, L"cc_setondialogabort");
		add(CC_SETONSUBCHANGE, L"cc_setonsubchange");
		add(CC_SETONSTOCKTRANSMIT, L"cc_setonstocktransmit");
		add(CC_SETONRESIZE, L"cc_setonresize");
		add(CC_SETONCLANSETTINGSTRANSMIT, L"cc_setonclansettingstransmit");
		add(CC_SETONCLANCHANNELTRANSMIT, L"cc_setonclanchanneltransmit");
		add(CC_GETX, L"cc_getx");
		add(CC_GETY, L"cc_gety");
		add(CC_GETWIDTH, L"cc_getwidth");
		add(CC_GETHEIGHT, L"cc_getheight");
		add(CC_GETHIDE, L"cc_gethide");
		add(CC_GETLAYER, L"cc_getlayer");
		add(CC_GETSCROLLX, L"cc_getscrollx");
		add(CC_GETSCROLLY, L"cc_getscrolly");
		add(CC_GETTEXT, L"cc_gettext");
		add(CC_GETSCROLLWIDTH, L"cc_getscrollwidth");
		add(CC_GETSCROLLHEIGHT, L"cc_getscrollheight");
		add(CC_GETMODELZOOM, L"cc_getmodelzoom");
		add(CC_GETMODELANGLE_X, L"cc_getmodelangle_x");
		add(CC_GETMODELANGLE_Z, L"cc_getmodelangle_z");
		add(CC_GETMODELANGLE_Y, L"cc_getmodelangle_y");
		add(CC_GETTRANS, L"cc_gettrans");
		add(CC_GETCOLOUR, L"cc_getcolour");
		add(CC_GETFILLCOLOUR, L"cc_getfillcolour");
		add(CC_GETMODELTRANSPARENT, L"cc_getmodeltransparent");
		add(CC_GETINVOBJECT, L"cc_getinvobject");
		add(CC_GETINVCOUNT, L"cc_getinvcount");
		add(CC_GETID, L"cc_getid");
		add(CC_GETTARGETMASK, L"cc_gettargetmask");
		add(CC_GETOP, L"cc_getop");
		add(CC_GETOPBASE, L"cc_getopbase");
		add(CC_CALLONRESIZE, L"cc_callonresize");
		add(CC_TRIGGEROP, L"cc_triggerop");
		add(IF_SETPOSITION, L"if_setposition");
		add(IF_SETSIZE, L"if_setsize");
		add(IF_SETHIDE, L"if_sethide");
		add(IF_SETNOCLICKTHROUGH, L"if_setnoclickthrough");
		add(IF_SETNOSCROLLTHROUGH, L"if_setnoscrollthrough");
		add(IF_SETSCROLLPOS, L"if_setscrollpos");
		add(IF_SETCOLOUR, L"if_setcolour");
		add(IF_SETFILL, L"if_setfill");
		add(IF_SETTRANS, L"if_settrans");
		add(IF_SETLINEWID, L"if_setlinewid");
		add(IF_SETGRAPHIC, L"if_setgraphic");
		add(IF_SET2DANGLE, L"if_set2dangle");
		add(IF_SETTILING, L"if_settiling");
		add(IF_SETMODEL, L"if_setmodel");
		add(IF_SETMODELANGLE, L"if_setmodelangle");
		add(IF_SETMODELANIM, L"if_setmodelanim");
		add(IF_SETMODELORTHOG, L"if_setmodelorthog");
		add(IF_SETTEXT, L"if_settext");
		add(IF_SETTEXTFONT, L"if_settextfont");
		add(IF_SETTEXTALIGN, L"if_settextalign");
		add(IF_SETTEXTSHADOW, L"if_settextshadow");
		add(IF_SETOUTLINE, L"if_setoutline");
		add(IF_SETGRAPHICSHADOW, L"if_setgraphicshadow");
		add(IF_SETVFLIP, L"if_setvflip");
		add(IF_SETHFLIP, L"if_sethflip");
		add(IF_SETSCROLLSIZE, L"if_setscrollsize");
		add(IF_RESUME_PAUSEBUTTON, L"if_resume_pausebutton");
		add(IF_SETFILLCOLOUR, L"if_setfillcolour");
		add(IF_SETLINEDIRECTION, L"if_setlinedirection");
		add(IF_SETMODELTRANSPARENT, L"if_setmodeltransparent");
		add(IF_SETOBJECT, L"if_setobject");
		add(IF_SETNPCHEAD, L"if_setnpchead");
		add(IF_SETPLAYERHEAD_SELF, L"if_setplayerhead_self");
		add(IF_SETOBJECT_NONUM, L"if_setobject_nonum");
		add(IF_SETOBJECT_ALWAYS_NUM, L"if_setobject_always_num");
		add(IF_SETOP, L"if_setop");
		add(IF_SETDRAGGABLE, L"if_setdraggable");
		add(IF_SETDRAGGABLEBEHAVIOR, L"if_setdraggablebehavior");
		add(IF_SETDRAGDEADZONE, L"if_setdragdeadzone");
		add(IF_SETDRAGDEADTIME, L"if_setdragdeadtime");
		add(IF_SETOPBASE, L"if_setopbase");
		add(IF_SETTARGETVERB, L"if_settargetverb");
		add(IF_CLEAROPS, L"if_clearops");
		add(IF_SETOPKEY, L"if_setopkey");
		add(IF_SETOPTKEY, L"if_setoptkey");
		add(IF_SETOPKEYRATE, L"if_setopkeyrate");
		add(IF_SETOPTKEYRATE, L"if_setoptkeyrate");
		add(IF_SETOPKEYIGNOREHELD, L"if_setopkeyignoreheld");
		add(IF_SETOPTKEYIGNOREHELD, L"if_setoptkeyignoreheld");
		add(IF_SETONCLICK, L"if_setonclick");
		add(IF_SETONHOLD, L"if_setonhold");
		add(IF_SETONRELEASE, L"if_setonrelease");
		add(IF_SETONMOUSEOVER, L"if_setonmouseover");
		add(IF_SETONMOUSELEAVE, L"if_setonmouseleave");
		add(IF_SETONDRAG, L"if_setondrag");
		add(IF_SETONTARGETLEAVE, L"if_setontargetleave");
		add(IF_SETONVARTRANSMIT, L"if_setonvartransmit");
		add(IF_SETONTIMER, L"if_setontimer");
		add(IF_SETONOP, L"if_setonop");
		add(IF_SETONDRAGCOMPLETE, L"if_setondragcomplete");
		add(IF_SETONCLICKREPEAT, L"if_setonclickrepeat");
		add(IF_SETONMOUSEREPEAT, L"if_setonmouserepeat");
		add(IF_SETONINVTRANSMIT, L"if_setoninvtransmit");
		add(IF_SETONSTATTRANSMIT, L"if_setonstattransmit");
		add(IF_SETONTARGETENTER, L"if_setontargetenter");
		add(IF_SETONSCROLLWHEEL, L"if_setonscrollwheel");
		add(IF_SETONCHATTRANSMIT, L"if_setonchattransmit");
		add(IF_SETONKEY, L"if_setonkey");
		add(IF_SETONFRIENDTRANSMIT, L"if_setonfriendtransmit");
		add(IF_SETONCLANTRANSMIT, L"if_setonclantransmit");
		add(IF_SETONMISCTRANSMIT, L"if_setonmisctransmit");
		add(IF_SETONDIALOGABORT, L"if_setondialogabort");
		add(IF_SETONSUBCHANGE, L"if_setonsubchange");
		add(IF_SETONSTOCKTRANSMIT, L"if_setonstocktransmit");
		add(IF_SETONRESIZE, L"if_setonresize");
		add(IF_SETONCLANSETTINGSTRANSMIT, L"if_setonclansettingstransmit");
		add(IF_SETONCLANCHANNELTRANSMIT, L"if_setonclanchanneltransmit");
		add(IF_GETX, L"if_getx");
		add(IF_GETY, L"if_gety");
		add(IF_GETWIDTH, L"if_getwidth");
		add(IF_GETHEIGHT, L"if_getheight");
		add(IF_GETHIDE, L"if_gethide");
		add(IF_GETLAYER, L"if_getlayer");
		add(IF_GETSCROLLX, L"if_getscrollx");
		add(IF_GETSCROLLY, L"if_getscrolly");
		add(IF_GETTEXT, L"if_gettext");
		add(IF_GETSCROLLWIDTH, L"if_getscrollwidth");
		add(IF_GETSCROLLHEIGHT, L"if_getscrollheight");
		add(IF_GETMODELZOOM, L"if_getmodelzoom");
		add(IF_GETMODELANGLE_X, L"if_getmodelangle_x");
		add(IF_GETMODELANGLE_Z, L"if_getmodelangle_z");
		add(IF_GETMODELANGLE_Y, L"if_getmodelangle_y");
		add(IF_GETTRANS, L"if_gettrans");
		add(IF_GETCOLOUR, L"if_getcolour");
		add(IF_GETFILLCOLOUR, L"if_getfillcolour");
		add(IF_GETMODELTRANSPARENT, L"if_getmodeltransparent");
		add(IF_GETINVOBJECT, L"if_getinvobject");
		add(IF_GETINVCOUNT, L"if_getinvcount");
		add(IF_HASSUB, L"if_hassub");
		add(IF_GETTOP, L"if_gettop");
		add(IF_GETTARGETMASK, L"if_gettargetmask");
		add(IF_GETOP, L"if_getop");
		add(IF_GETOPBASE, L"if_getopbase");
		add(IF_CALLONRESIZE, L"if_callonresize");
		add(IF_TRIGGEROP, L"if_triggerop");
		add(MES, L"mes");
		add(ANIM, L"anim");
		add(IF_CLOSE, L"if_close");
		add(RESUME_COUNTDIALOG, L"resume_countdialog");
		add(RESUME_NAMEDIALOG, L"resume_namedialog");
		add(RESUME_STRINGDIALOG, L"resume_stringdialog");
		add(OPPLAYER, L"opplayer");
		add(IF_DRAGPICKUP, L"if_dragpickup");
		add(CC_DRAGPICKUP, L"cc_dragpickup");
		add(MOUSECAM, L"mousecam");
		add(GETREMOVEROOFS, L"getremoveroofs");
		add(SETREMOVEROOFS, L"setremoveroofs");
		add(OPENURL, L"openurl");
		add(RESUME_OBJDIALOG, L"resume_objdialog");
		add(BUG_REPORT, L"bug_report");
		add(SETSHIFTCLICKDROP, L"setshiftclickdrop");
		add(SETSHOWMOUSEOVERTEXT, L"setshowmouseovertext");
		add(RENDERSELF, L"renderself");
		add(SETSHOWMOUSECROSS, L"setshowmousecross");
		add(SETSHOWLOADINGMESSAGES, L"setshowloadingmessages");
		add(SETTAPTODROP, L"settaptodrop");
		add(GETTAPTODROP, L"gettaptodrop");
		add(GETCANVASSIZE, L"getcanvassize");
		add(MOBILE_SETFPS, L"mobile_setfps");
		add(MOBILE_OPENSTORE, L"mobile_openstore");
		add(MOBILE_OPENSTORECATEGORY, L"mobile_openstorecategory");
		add(SETHIDEUSERNAME, L"sethideusername");
		add(GETHIDEUSERNAME, L"gethideusername");
		add(SETREMEMBERUSERNAME, L"setrememberusername");
		add(GETREMEMBERUSERNAME, L"getrememberusername");
		add(SHOW_IOS_REVIEW, L"show_ios_review");
		add(SOUND_SYNTH, L"sound_synth");
		add(SOUND_SONG, L"sound_song");
		add(SOUND_JINGLE, L"sound_jingle");
		add(CLIENTCLOCK, L"clientclock");
		add(INV_GETOBJ, L"inv_getobj");
		add(INV_GETNUM, L"inv_getnum");
		add(INV_TOTAL, L"inv_total");
		add(INV_SIZE, L"inv_size");
		add(STAT, L"stat");
		add(STAT_BASE, L"stat_base");
		add(STAT_XP, L"stat_xp");
		add(COORD, L"coord");
		add(COORDX, L"coordx");
		add(COORDZ, L"coordz");
		add(COORDY, L"coordy");
		add(MAP_MEMBERS, L"map_members");
		add(INVOTHER_GETOBJ, L"invother_getobj");
		add(INVOTHER_GETNUM, L"invother_getnum");
		add(INVOTHER_TOTAL, L"invother_total");
		add(STAFFMODLEVEL, L"staffmodlevel");
		add(REBOOTTIMER, L"reboottimer");
		add(MAP_WORLD, L"map_world");
		add(RUNENERGY_VISIBLE, L"runenergy_visible");
		add(RUNWEIGHT_VISIBLE, L"runweight_visible");
		add(PLAYERMOD, L"playermod");
		add(WORLDFLAGS, L"worldflags");
		add(MOVECOORD, L"movecoord");
		add(ENUM_STRING, L"enum_string");
		add(ENUM, L"enum");
		add(ENUM_GETOUTPUTCOUNT, L"enum_getoutputcount");
		add(FRIEND_COUNT, L"friend_count");
		add(FRIEND_GETNAME, L"friend_getname");
		add(FRIEND_GETWORLD, L"friend_getworld");
		add(FRIEND_GETRANK, L"friend_getrank");
		add(FRIEND_SETRANK, L"friend_setrank");
		add(FRIEND_ADD, L"friend_add");
		add(FRIEND_DEL, L"friend_del");
		add(IGNORE_ADD, L"ignore_add");
		add(IGNORE_DEL, L"ignore_del");
		add(FRIEND_TEST, L"friend_test");
		add(CLAN_GETCHATDISPLAYNAME, L"clan_getchatdisplayname");
		add(CLAN_GETCHATCOUNT, L"clan_getchatcount");
		add(CLAN_GETCHATUSERNAME, L"clan_getchatusername");
		add(CLAN_GETCHATUSERWORLD, L"clan_getchatuserworld");
		add(CLAN_GETCHATUSERRANK, L"clan_getchatuserrank");
		add(CLAN_GETCHATMINKICK, L"clan_getchatminkick");
		add(CLAN_KICKUSER, L"clan_kickuser");
		add(CLAN_GETCHATRANK, L"clan_getchatrank");
		add(CLAN_JOINCHAT, L"clan_joinchat");
		add(CLAN_LEAVECHAT, L"clan_leavechat");
		add(IGNORE_COUNT, L"ignore_count");
		add(IGNORE_GETNAME, L"ignore_getname");
		add(IGNORE_TEST, L"ignore_test");
		add(CLAN_ISSELF, L"clan_isself");
		add(CLAN_GETCHATOWNERNAME, L"clan_getchatownername");
		add(CLAN_ISFRIEND, L"clan_isfriend");
		add(CLAN_ISIGNORE, L"clan_isignore");
		add(ACTIVECLANSETTINGS_FIND_LISTENED, L"activeclansettings_find_listened");
		add(ACTIVECLANSETTINGS_FIND_AFFINED, L"activeclansettings_find_affined");
		add(ACTIVECLANSETTINGS_GETCLANNAME, L"activeclansettings_getclanname");
		add(ACTIVECLANSETTINGS_GETALLOWUNAFFINED, L"activeclansettings_getallowunaffined");
		add(ACTIVECLANSETTINGS_GETRANKTALK, L"activeclansettings_getranktalk");
		add(ACTIVECLANSETTINGS_GETRANKKICK, L"activeclansettings_getrankkick");
		add(ACTIVECLANSETTINGS_GETRANKLOOTSHARE, L"activeclansettings_getranklootshare");
		add(ACTIVECLANSETTINGS_GETCOINSHARE, L"activeclansettings_getcoinshare");
		add(ACTIVECLANSETTINGS_GETAFFINEDCOUNT, L"activeclansettings_getaffinedcount");
		add(ACTIVECLANSETTINGS_GETAFFINEDDISPLAYNAME, L"activeclansettings_getaffineddisplayname");
		add(ACTIVECLANSETTINGS_GETAFFINEDRANK, L"activeclansettings_getaffinedrank");
		add(ACTIVECLANSETTINGS_GETBANNEDCOUNT, L"activeclansettings_getbannedcount");
		add(ACTIVECLANSETTINGS_GETBANNEDDISPLAYNAME, L"activeclansettings_getbanneddisplayname");
		add(ACTIVECLANSETTINGS_GETAFFINEDEXTRAINFO, L"activeclansettings_getaffinedextrainfo");
		add(ACTIVECLANSETTINGS_GETCURRENTOWNER_SLOT, L"activeclansettings_getcurrentowner_slot");
		add(ACTIVECLANSETTINGS_GETREPLACEMENTOWNER_SLOT, L"activeclansettings_getreplacementowner_slot");
		add(ACTIVECLANSETTINGS_GETAFFINEDSLOT, L"activeclansettings_getaffinedslot");
		add(ACTIVECLANSETTINGS_GETSORTEDAFFINEDSLOT, L"activeclansettings_getsortedaffinedslot");
		add(AFFINEDCLANSETTINGS_ADDBANNED_FROMCHANNEL, L"affinedclansettings_addbanned_fromchannel");
		add(ACTIVECLANSETTINGS_GETAFFINEDJOINRUNEDAY, L"activeclansettings_getaffinedjoinruneday");
		add(AFFINEDCLANSETTINGS_SETMUTED_FROMCHANNEL, L"affinedclansettings_setmuted_fromchannel");
		add(ACTIVECLANSETTINGS_GETAFFINEDMUTED, L"activeclansettings_getaffinedmuted");
		add(ACTIVECLANCHANNEL_FIND_LISTENED, L"activeclanchannel_find_listened");
		add(ACTIVECLANCHANNEL_FIND_AFFINED, L"activeclanchannel_find_affined");
		add(ACTIVECLANCHANNEL_GETCLANNAME, L"activeclanchannel_getclanname");
		add(ACTIVECLANCHANNEL_GETRANKKICK, L"activeclanchannel_getrankkick");
		add(ACTIVECLANCHANNEL_GETRANKTALK, L"activeclanchannel_getranktalk");
		add(ACTIVECLANCHANNEL_GETUSERCOUNT, L"activeclanchannel_getusercount");
		add(ACTIVECLANCHANNEL_GETUSERDISPLAYNAME, L"activeclanchannel_getuserdisplayname");
		add(ACTIVECLANCHANNEL_GETUSERRANK, L"activeclanchannel_getuserrank");
		add(ACTIVECLANCHANNEL_GETUSERWORLD, L"activeclanchannel_getuserworld");
		add(ACTIVECLANCHANNEL_KICKUSER, L"activeclanchannel_kickuser");
		add(ACTIVECLANCHANNEL_GETUSERSLOT, L"activeclanchannel_getuserslot");
		add(ACTIVECLANCHANNEL_GETSORTEDUSERSLOT, L"activeclanchannel_getsorteduserslot");
		add(CLANPROFILE_FIND, L"clanprofile_find");
		add(STOCKMARKET_GETOFFERTYPE, L"stockmarket_getoffertype");
		add(STOCKMARKET_GETOFFERITEM, L"stockmarket_getofferitem");
		add(STOCKMARKET_GETOFFERPRICE, L"stockmarket_getofferprice");
		add(STOCKMARKET_GETOFFERCOUNT, L"stockmarket_getoffercount");
		add(STOCKMARKET_GETOFFERCOMPLETEDCOUNT, L"stockmarket_getoffercompletedcount");
		add(STOCKMARKET_GETOFFERCOMPLETEDGOLD, L"stockmarket_getoffercompletedgold");
		add(STOCKMARKET_ISOFFEREMPTY, L"stockmarket_isofferempty");
		add(STOCKMARKET_ISOFFERSTABLE, L"stockmarket_isofferstable");
		add(STOCKMARKET_ISOFFERFINISHED, L"stockmarket_isofferfinished");
		add(STOCKMARKET_ISOFFERADDING, L"stockmarket_isofferadding");
		add(TRADINGPOST_SORTBY_NAME, L"tradingpost_sortby_name");
		add(TRADINGPOST_SORTBY_PRICE, L"tradingpost_sortby_price");
		add(TRADINGPOST_SORTFILTERBY_WORLD, L"tradingpost_sortfilterby_world");
		add(TRADINGPOST_SORTBY_AGE, L"tradingpost_sortby_age");
		add(TRADINGPOST_SORTBY_COUNT, L"tradingpost_sortby_count");
		add(TRADINGPOST_GETTOTALOFFERS, L"tradingpost_gettotaloffers");
		add(TRADINGPOST_GETOFFERWORLD, L"tradingpost_getofferworld");
		add(TRADINGPOST_GETOFFERNAME, L"tradingpost_getoffername");
		add(TRADINGPOST_GETOFFERPREVIOUSNAME, L"tradingpost_getofferpreviousname");
		add(TRADINGPOST_GETOFFERAGE, L"tradingpost_getofferage");
		add(TRADINGPOST_GETOFFERCOUNT, L"tradingpost_getoffercount");
		add(TRADINGPOST_GETOFFERPRICE, L"tradingpost_getofferprice");
		add(TRADINGPOST_GETOFFERITEM, L"tradingpost_getofferitem");
		add(ADD, L"add");
		add(SUB, L"sub");
		add(MULTIPLY, L"multiply");
		add(DIV, L"div");
		add(RANDOM, L"random");
		add(RANDOMINC, L"randominc");
		add(INTERPOLATE, L"interpolate");
		add(ADDPERCENT, L"addpercent");
		add(SETBIT, L"setbit");
		add(CLEARBIT, L"clearbit");
		add(TESTBIT, L"testbit");
		add(MOD, L"mod");
		add(POW, L"pow");
		add(INVPOW, L"invpow");
		add(AND, L"and");
		add(OR, L"or");
		add(SCALE, L"scale");
		add(BITCOUNT, L"bitcount");
		add(TOGGLEBIT, L"togglebit");
		add(SETBIT_RANGE, L"setbit_range");
		add(CLEARBIT_RANGE, L"clearbit_range");
		add(GETBIT_RANGE, L"getbit_range");
		add(APPEND_NUM, L"append_num");
		add(APPEND, L"append");
		add(APPEND_SIGNNUM, L"append_signnum");
		add(LOWERCASE, L"lowercase");
		add(FROMDATE, L"fromdate");
		add(TEXT_GENDER, L"text_gender");
		add(TOSTRING, L"tostring");
		add(COMPARE, L"compare");
		add(PARAHEIGHT, L"paraheight");
		add(PARAWIDTH, L"parawidth");
		add(TEXT_SWITCH, L"text_switch");
		add(ESCAPE, L"escape");
		add(APPEND_CHAR, L"append_char");
		add(CHAR_ISPRINTABLE, L"char_isprintable");
		add(CHAR_ISALPHANUMERIC, L"char_isalphanumeric");
		add(CHAR_ISALPHA, L"char_isalpha");
		add(CHAR_ISNUMERIC, L"char_isnumeric");
		add(STRING_LENGTH, L"string_length");
		add(SUBSTRING, L"substring");
		add(REMOVETAGS, L"removetags");
		add(STRING_INDEXOF_CHAR, L"string_indexof_char");
		add(STRING_INDEXOF_STRING, L"string_indexof_string");
		add(OC_NAME, L"oc_name");
		add(OC_OP, L"oc_op");
		add(OC_IOP, L"oc_iop");
		add(OC_COST, L"oc_cost");
		add(OC_STACKABLE, L"oc_stackable");
		add(OC_CERT, L"oc_cert");
		add(OC_UNCERT, L"oc_uncert");
		add(OC_MEMBERS, L"oc_members");
		add(OC_PLACEHOLDER, L"oc_placeholder");
		add(OC_UNPLACEHOLDER, L"oc_unplaceholder");
		add(OC_FIND, L"oc_find");
		add(OC_FINDNEXT, L"oc_findnext");
		add(OC_FINDRESET, L"oc_findreset");
		add(CHAT_GETFILTER_PUBLIC, L"chat_getfilter_public");
		add(CHAT_SETFILTER, L"chat_setfilter");
		add(CHAT_SENDABUSEREPORT, L"chat_sendabusereport");
		add(CHAT_GETHISTORY_BYTYPEANDLINE, L"chat_gethistory_bytypeandline");
		add(CHAT_GETHISTORY_BYUID, L"chat_gethistory_byuid");
		add(CHAT_GETFILTER_PRIVATE, L"chat_getfilter_private");
		add(CHAT_SENDPUBLIC, L"chat_sendpublic");
		add(CHAT_SENDPRIVATE, L"chat_sendprivate");
		add(CHAT_SENDCLAN, L"chat_sendclan");
		add(CHAT_PLAYERNAME, L"chat_playername");
		add(CHAT_GETFILTER_TRADE, L"chat_getfilter_trade");
		add(CHAT_GETHISTORYLENGTH, L"chat_gethistorylength");
		add(CHAT_GETNEXTUID, L"chat_getnextuid");
		add(CHAT_GETPREVUID, L"chat_getprevuid");
		add(DOCHEAT, L"docheat");
		add(CHAT_SETMESSAGEFILTER, L"chat_setmessagefilter");
		add(CHAT_GETMESSAGEFILTER, L"chat_getmessagefilter");
		add(WRITECONSOLE, L"writeconsole");
		add(CHAT_GETHISTORYEX_BYTYPEANDLINE, L"chat_gethistoryex_bytypeandline");
		add(CHAT_GETHISTORYEX_BYUID, L"chat_gethistoryex_byuid");
		add(GETWINDOWMODE, L"getwindowmode");
		add(SETWINDOWMODE, L"setwindowmode");
		add(GETDEFAULTWINDOWMODE, L"getdefaultwindowmode");
		add(SETDEFAULTWINDOWMODE, L"setdefaultwindowmode");
		add(CAM_FORCEANGLE, L"cam_forceangle");
		add(CAM_GETANGLE_XA, L"cam_getangle_xa");
		add(CAM_GETANGLE_YA, L"cam_getangle_ya");
		add(CAM_SETFOLLOWHEIGHT, L"cam_setfollowheight");
		add(CAM_GETFOLLOWHEIGHT, L"cam_getfollowheight");
		add(LOGOUT, L"logout");
		add(VIEWPORT_SETFOV, L"viewport_setfov");
		add(VIEWPORT_SETZOOM, L"viewport_setzoom");
		add(VIEWPORT_CLAMPFOV, L"viewport_clampfov");
		add(VIEWPORT_GETEFFECTIVESIZE, L"viewport_geteffectivesize");
		add(VIEWPORT_GETZOOM, L"viewport_getzoom");
		add(VIEWPORT_GETFOV, L"viewport_getfov");
		add(WORLDLIST_FETCH, L"worldlist_fetch");
		add(WORLDLIST_START, L"worldlist_start");
		add(WORLDLIST_NEXT, L"worldlist_next");
		add(WORLDLIST_SPECIFIC, L"worldlist_specific");
		add(WORLDLIST_SORT, L"worldlist_sort");
		add(SETFOLLOWEROPSLOWPRIORITY, L"setfolloweropslowpriority");
		add(NC_PARAM, L"nc_param");
		add(LC_PARAM, L"lc_param");
		add(OC_PARAM, L"oc_param");
		add(STRUCT_PARAM, L"struct_param");
		add(ON_MOBILE, L"on_mobile");
		add(CLIENTTYPE, L"clienttype");
		add(MOBILE_KEYBOARDHIDE, L"mobile_keyboardhide");
		add(MOBILE_BATTERYLEVEL, L"mobile_batterylevel");
		add(MOBILE_BATTERYCHARGING, L"mobile_batterycharging");
		add(MOBILE_WIFIAVAILABLE, L"mobile_wifiavailable");
		add(WORLDMAP_GETMAPNAME, L"worldmap_getmapname");
		add(WORLDMAP_SETMAP, L"worldmap_setmap");
		add(WORLDMAP_GETZOOM, L"worldmap_getzoom");
		add(WORLDMAP_SETZOOM, L"worldmap_setzoom");
		add(WORLDMAP_ISLOADED, L"worldmap_isloaded");
		add(WORLDMAP_JUMPTODISPLAYCOORD, L"worldmap_jumptodisplaycoord");
		add(WORLDMAP_JUMPTODISPLAYCOORD_INSTANT, L"worldmap_jumptodisplaycoord_instant");
		add(WORLDMAP_JUMPTOSOURCECOORD, L"worldmap_jumptosourcecoord");
		add(WORLDMAP_JUMPTOSOURCECOORD_INSTANT, L"worldmap_jumptosourcecoord_instant");
		add(WORLDMAP_GETDISPLAYPOSITION, L"worldmap_getdisplayposition");
		add(WORLDMAP_GETCONFIGORIGIN, L"worldmap_getconfigorigin");
		add(WORLDMAP_GETCONFIGSIZE, L"worldmap_getconfigsize");
		add(WORLDMAP_GETCONFIGBOUNDS, L"worldmap_getconfigbounds");
		add(WORLDMAP_GETCONFIGZOOM, L"worldmap_getconfigzoom");
		add(WORLDMAP_GETCURRENTMAP, L"worldmap_getcurrentmap");
		add(WORLDMAP_GETDISPLAYCOORD, L"worldmap_getdisplaycoord");
		add(WORLDMAP_COORDINMAP, L"worldmap_coordinmap");
		add(WORLDMAP_GETSIZE, L"worldmap_getsize");
		add(WORLDMAP_PERPETUALFLASH, L"worldmap_perpetualflash");
		add(WORLDMAP_FLASHELEMENT, L"worldmap_flashelement");
		add(WORLDMAP_FLASHELEMENTCATEGORY, L"worldmap_flashelementcategory");
		add(WORLDMAP_STOPCURRENTFLASHES, L"worldmap_stopcurrentflashes");
		add(WORLDMAP_DISABLEELEMENTS, L"worldmap_disableelements");
		add(WORLDMAP_DISABLEELEMENT, L"worldmap_disableelement");
		add(WORLDMAP_DISABLEELEMENTCATEGORY, L"worldmap_disableelementcategory");
		add(WORLDMAP_GETDISABLEELEMENTS, L"worldmap_getdisableelements");
		add(WORLDMAP_GETDISABLEELEMENT, L"worldmap_getdisableelement");
		add(WORLDMAP_GETDISABLEELEMENTCATEGORY, L"worldmap_getdisableelementcategory");
		add(WORLDMAP_LISTELEMENT_START, L"worldmap_listelement_start");
		add(WORLDMAP_LISTELEMENT_NEXT, L"worldmap_listelement_next");
		add(MEC_TEXT, L"mec_text");
		add(MEC_TEXTSIZE, L"mec_textsize");
		add(MEC_CATEGORY, L"mec_category");
		add(MEC_SPRITE, L"mec_sprite");
		add(WORLDMAP_ELEMENT, L"worldmap_element");
		add(WORLDMAP_ELEMENTCOORD, L"worldmap_elementcoord");
		add(DB_FIND_WITH_COUNT, L"db_find_with_count");
		add(DB_FINDNEXT, L"db_findnext");
		add(DB_GETFIELD, L"db_getfield");
		add(DB_GETFIELDCOUNT, L"db_getfieldcount");
		add(DB_FINDALL_WITH_COUNT, L"db_findall_with_count");
		add(DB_GETROWTABLE, L"db_getrowtable");
		add(DB_GETROW, L"db_getrow");
		add(DB_FIND_FILTER_WITH_COUNT, L"db_find_filter_with_count");
		add(DB_FIND, L"db_find");
		add(DB_FINDALL, L"db_findall");
		add(DB_FIND_FILTER, L"db_find_filter");
	}

	void Instructions::add(int opcode, const std::wstring &name)
	{
		std::shared_ptr<Instruction> i = std::make_shared<Instruction>(opcode);
		i->setName(name);

		assert(instructions.find(opcode) != instructions.end() == false);
		instructions.emplace(opcode, i);

		if (name != L"")
		{
			assert(instructionsByName.find(name) != instructionsByName.end() == false);
			instructionsByName.emplace(name, i);
		}
	}

	std::shared_ptr<Instruction> Instructions::find(int opcode)
	{
		return instructions[opcode];
	}

	std::shared_ptr<Instruction> Instructions::find(const std::wstring &name)
	{
		return instructionsByName[name];
	}
}
